name: CI-CD Pipeline with Code Quality

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0' 

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Install swag for Swagger generation
      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      # Generate Swagger docs (using Makefile target)
      - name: Generate Swagger docs
        run: make swagger

      # Run golangci-lint for code quality
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m --verbose

      # Run gosec for security scanning
      - name: Run gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

      # Run tests (using Makefile target)
      - name: Run tests
        run: make test

      # Format code and check for changes
      - name: Run go fmt
        run: |
          make fmt
          git diff --exit-code || (echo "Code formatting issues detected. Run 'make fmt' locally and commit changes." && exit 1)

      # Build the application (using Makefile target)
      - name: Build
        run: make build

      # Optional: Static code analysis with staticcheck
      - name: Run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' 
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go environment (for build during deployment)
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # Install swag for Swagger generation
      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      # Build the application
      - name: Build
        run: make build

      # Example: Deploy to a VPS via SSH (customize based on your target)
      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key ./ticket-zetu-api $SERVER_USER@$SERVER_IP:/path/to/deployment/ticket-zetu-api/
          ssh -o StrictHostKeyChecking=no -i private_key $SERVER_USER@$SERVER_IP << 'EOF'
            cd /path/to/deployment/ticket-zetu-api
            sudo systemctl stop ticket-zetu-api || true
            mv ticket-zetu-api ticket-zetu-api.new
            sudo systemctl start ticket-zetu-api
          EOF